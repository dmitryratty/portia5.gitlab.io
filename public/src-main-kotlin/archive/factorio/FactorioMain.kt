package archive.factorio

/*
Жедешка на 2 пробела имеет проблему с аутпост станцией с робопортом. Жедешка на 4 пробела имеет ту же проблему плюс проблему симметрии. Жедешка на 6 пробелов не имеет обеих этих проблем.

Сколько "Сборочный автомат 2" нужно, чтобы заполнить вещью "Медный провод" половинку жёлтого пояса: (15 / 2) / (2 / (0.5 / 0.75)) = 2.5

Железная плита, Медная плита: 45 / (1 / (3.2 / 2)) = 72
Медный провод: 45 / (1 / (0.5 / 1.25)) = 18
Стальная балка: 45 / (5 / (16 / 2)) = 72

Электросхема: (45 * 2) / (4 / (0.5 / 1.25)) = 9
Улучшенная электросхема: (45 * 2) / (8 / (6 / 1.25)) = 54
Улучшенная электросхема: (15 * 2) / (8 / (6 / 1.25)) = 18, и на выходе 18 * (1 / (6 / 1.25)) = 3.75 Улучшенных электросхем в секунду.
Выход: 18 * (1 / (6 / 1.25))

Потребление насосов в Spacexplore - 50 kW, 4 штуки.
Потребление манипуляторов - 13.6 kW, 8 штук.
Потребление радара - 300 kW.
Суточное производство электроэнергии одной солнечной панелью с одним аккумулятором - 42 kW.
Солнечных панелей для обеспечения работы насосов, манипуляторов и радара: ((4 * 50) + (8 * 13.6) + 300) / 42 = 15 солнечных панелей.

Турбин для поглощения пара от теплообменников: (((16 * 103) / 60) * 2) / 3

Выход энергии с реакторов: (160 * 8 + 120 * 4) / 2
*/
class FactorioMain {
    companion object {
        @JvmStatic
        fun main(args: Array<String>) {
            FactorioMain().main()
        }
    }

    fun main() {
        //smeltersPerSecond()
        blockCalc()
    }

    private fun blockCalc() {
        // Считаем сколько меди лишней
        val copperInCalculator: Double = 17545.2
        val copperPlateForGreenCircuit: Double = 21244.7 / 2
        val ourCopperPlate: Double = copperInCalculator - copperPlateForGreenCircuit
        val ratio = ourCopperPlate / copperInCalculator
        println("$ratio $ourCopperPlate ${copperInCalculator * ratio}")
        // (17545.2 * 0.39457230467592275) / (45 * 60)
    }

    private fun smeltersPerSecond() {
        fun a(vararg elements: Int): Array<Int> {
            return elements.toTypedArray()
        }
        fun calc(vararg conf: Array<Int>) {
            // Рассчёты плавилен с маяками.
            var sum = 0.0
            for (pair in conf) {
                if (pair[1] != 0) {
                    sum += (1 / (3.2 / pair[0])) * pair[1]
                }
            }
            println(45.0 / 2.0 - sum)
        }
        // (45 / 2) - ((1 / (3.2 / 10)) * 3) - (1 / (3.2 / 9))
        //   - (1 / (3.2 / 8)) - ((1 / (3.2 / 7)) * 2)
        //   - (1 / (3.2 / 6)) - (1 / (3.2 / 5))
        calc(a(5, 1), a(6, 1), a(7, 2), a(8, 1), a(9, 1), a(10, 3))
        calc(a(5, 0), a(6, 2), a(7, 1), a(8, 1), a(9, 2), a(10, 3))
        calc(a(5, 2), a(6, 2), a(7, 2), a(8, 5), a(9, 0), a(10, 0))
        calc(a(5, 0), a(6, 0), a(7, 2), a(8, 2), a(9, 0), a(10, 4))
        calc(a(5, 0), a(6, 2), a(7, 2), a(8, 0), a(9, 2), a(10, 2))
    }
}